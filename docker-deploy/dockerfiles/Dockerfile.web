# Production-optimized Dockerfile for Next.js Web Application
# Multi-stage build for minimal image size and better security

# Stage 1: Dependencies
FROM node:20-alpine AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package files (handle missing package-lock.json)
COPY apps/web/package.json ./
COPY package.json ../
COPY turbo.json ../

# Try to copy package-lock.json if it exists
COPY apps/web/package-lock.jso[n] ./ 2>/dev/null || true
COPY package-lock.jso[n] ../ 2>/dev/null || true

# Install dependencies (use npm install if no lock file)
RUN if [ -f "package-lock.json" ]; then \
        npm ci --only=production; \
    else \
        npm install --only=production; \
    fi && \
    npm cache clean --force

# Stage 2: Builder
FROM node:20-alpine AS builder
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy node_modules from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY apps/web .
COPY packages ../packages
COPY turbo.json ../
COPY package*.json ../

# Set build arguments for environment variables
ARG NODE_ENV=production
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_USER_SERVICE_URL
ARG NEXT_PUBLIC_WORK_ORDER_SERVICE_URL
ARG NEXT_PUBLIC_ASSET_SERVICE_URL

ENV NODE_ENV=${NODE_ENV}
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
ENV NEXT_PUBLIC_USER_SERVICE_URL=${NEXT_PUBLIC_USER_SERVICE_URL}
ENV NEXT_PUBLIC_WORK_ORDER_SERVICE_URL=${NEXT_PUBLIC_WORK_ORDER_SERVICE_URL}
ENV NEXT_PUBLIC_ASSET_SERVICE_URL=${NEXT_PUBLIC_ASSET_SERVICE_URL}

# Build the application
ENV NEXT_TELEMETRY_DISABLED=1
RUN npm run build

# Stage 3: Runner
FROM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy necessary files
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Set correct permissions
RUN chown -R nextjs:nodejs /app

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000/api/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"

CMD ["node", "server.js"]