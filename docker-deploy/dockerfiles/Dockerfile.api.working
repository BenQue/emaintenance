# Multi-stage Dockerfile for E-Maintenance API Services
# Optimized for production with proper Prisma client generation
# Version: 3.0 - Working Version

# Stage 1: Base dependencies
FROM node:20-alpine AS base
WORKDIR /app
RUN apk add --no-cache libc6-compat openssl

# Copy package files
COPY package*.json ./
COPY packages/database/package*.json ./packages/database/

# Install all dependencies (including dev dependencies for Prisma generation)
RUN npm ci

# Stage 2: Prisma generation
FROM base AS prisma
WORKDIR /app

# Copy Prisma schema and generate client
COPY packages/database/prisma ./packages/database/prisma
COPY packages/database/package*.json ./packages/database/

# Generate Prisma client
WORKDIR /app/packages/database
RUN npx prisma generate

# Stage 3: Builder
FROM base AS builder
WORKDIR /app

ARG SERVICE_PATH
ARG SERVICE_NAME

# Validate required build arguments
RUN if [ -z "$SERVICE_PATH" ]; then echo "SERVICE_PATH is required" && exit 1; fi
RUN if [ -z "$SERVICE_NAME" ]; then echo "SERVICE_NAME is required" && exit 1; fi

# Copy source code
COPY turbo.json ./
COPY packages/ ./packages/
COPY ${SERVICE_PATH}/${SERVICE_NAME} ./service

# Copy Prisma generated files
COPY --from=prisma /app/packages/database/node_modules/.prisma ./packages/database/node_modules/.prisma
COPY --from=prisma /app/packages/database/node_modules/@prisma ./packages/database/node_modules/@prisma

# Build the service
WORKDIR /app/service
RUN npm run build 2>/dev/null || {
    echo "No build script found, using source files directly"
    mkdir -p dist
    if [ -d "src" ]; then
        cp -r src/* dist/ 2>/dev/null || true
    else
        cp -r . dist/ 2>/dev/null || true
    fi
}

# Stage 4: Runtime
FROM node:20-alpine AS runner
WORKDIR /app

# Install runtime dependencies
RUN apk add --no-cache libc6-compat openssl curl tini

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 apiuser

# Copy package files and install production dependencies
COPY --from=builder /app/service/package*.json ./
RUN npm ci --only=production --ignore-scripts && \
    npm cache clean --force

# Copy Prisma files
COPY --from=prisma /app/packages/database/prisma ./prisma
COPY --from=prisma /app/packages/database/node_modules/.prisma ./node_modules/.prisma
COPY --from=prisma /app/packages/database/node_modules/@prisma ./node_modules/@prisma

# Copy built application
COPY --from=builder --chown=apiuser:nodejs /app/service/dist ./dist

# Create necessary directories
RUN mkdir -p /app/uploads /app/logs && \
    chown -R apiuser:nodejs /app/uploads /app/logs

# Set build-time variables as environment defaults
ARG SERVICE_PORT
ENV PORT=${SERVICE_PORT:-3001}
ENV NODE_ENV=production

# Switch to non-root user
USER apiuser

# Health check
ARG SERVICE_PORT
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:${SERVICE_PORT:-3001}/health || exit 1

# Use tini as init system
ENTRYPOINT ["/sbin/tini", "--"]

# Start the application
CMD ["node", "dist/index.js"]