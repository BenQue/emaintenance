# Production-optimized Dockerfile for Next.js Web Application
# Fixed version with proper build context and standalone output

# Stage 1: Dependencies
FROM node:20-alpine AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy monorepo root files
COPY package*.json ./
COPY turbo.json ./

# Copy web app package files
COPY apps/web/package*.json ./apps/web/

# Copy packages for shared dependencies
COPY packages ./packages

# Install all dependencies
RUN npm ci

# Stage 2: Builder
FROM node:20-alpine AS builder
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy installed dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/packages ./packages

# Copy web application source
COPY apps/web ./apps/web
COPY turbo.json ./
COPY package*.json ./

# Set build-time environment variables with defaults
ARG NODE_ENV=production
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_USER_SERVICE_URL
ARG NEXT_PUBLIC_WORK_ORDER_SERVICE_URL
ARG NEXT_PUBLIC_ASSET_SERVICE_URL

ENV NODE_ENV=${NODE_ENV}
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
ENV NEXT_PUBLIC_USER_SERVICE_URL=${NEXT_PUBLIC_USER_SERVICE_URL}
ENV NEXT_PUBLIC_WORK_ORDER_SERVICE_URL=${NEXT_PUBLIC_WORK_ORDER_SERVICE_URL}
ENV NEXT_PUBLIC_ASSET_SERVICE_URL=${NEXT_PUBLIC_ASSET_SERVICE_URL}

# Debug environment variables during build
RUN echo "=== Web Build Environment Debug ===" && \
    echo "NODE_ENV: ${NODE_ENV}" && \
    echo "NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}" && \
    echo "NEXT_PUBLIC_USER_SERVICE_URL: ${NEXT_PUBLIC_USER_SERVICE_URL}" && \
    echo "NEXT_PUBLIC_WORK_ORDER_SERVICE_URL: ${NEXT_PUBLIC_WORK_ORDER_SERVICE_URL}" && \
    echo "NEXT_PUBLIC_ASSET_SERVICE_URL: ${NEXT_PUBLIC_ASSET_SERVICE_URL}" && \
    echo "=================================="

# Disable Next.js telemetry
ENV NEXT_TELEMETRY_DISABLED=1

# Build the Next.js application
WORKDIR /app/apps/web

# Ensure next.config.js is configured for standalone output
RUN echo "Checking Next.js configuration..." && \
    if ! grep -q "output.*standalone" next.config.js 2>/dev/null; then \
        echo "Adding standalone output to next.config.js" && \
        cp next.config.js next.config.js.bak 2>/dev/null || true && \
        echo "/** @type {import('next').NextConfig} */" > next.config.tmp.js && \
        echo "const nextConfig = {" >> next.config.tmp.js && \
        echo "  output: 'standalone'," >> next.config.tmp.js && \
        echo "  poweredByHeader: false," >> next.config.tmp.js && \
        echo "  compress: true," >> next.config.tmp.js && \
        echo "  reactStrictMode: true," >> next.config.tmp.js && \
        echo "};" >> next.config.tmp.js && \
        echo "module.exports = nextConfig;" >> next.config.tmp.js && \
        mv next.config.tmp.js next.config.js; \
    fi

# Build the application
RUN npm run build

# Stage 3: Runner
FROM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Install runtime dependencies
RUN apk add --no-cache libc6-compat curl tini

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy public assets
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/public ./public

# Copy standalone build
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/.next/standalone ./

# Copy static files
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/.next/static ./apps/web/.next/static

# Create logs directory
RUN mkdir -p /app/logs && chown -R nextjs:nodejs /app/logs

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=45s --retries=3 \
    CMD curl -f http://localhost:3000 || exit 1

# Use tini as init system
ENTRYPOINT ["/sbin/tini", "--"]

# Start the Next.js server
CMD ["node", "apps/web/server.js"]