# Production-optimized Dockerfile for API Microservices
# Generic Dockerfile for all microservices with build arguments

# Stage 1: Dependencies
FROM node:20-alpine AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Build argument for service path
ARG SERVICE_PATH

# Copy package files
COPY ${SERVICE_PATH}/package*.json ./
COPY package*.json ../
COPY turbo.json ../

# Install production dependencies with cache
RUN --mount=type=cache,target=/root/.npm \
    npm ci --only=production && \
    npm cache clean --force

# Stage 2: Builder
FROM node:20-alpine AS builder
RUN apk add --no-cache libc6-compat
WORKDIR /app

ARG SERVICE_PATH

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules

# Copy source code
COPY ${SERVICE_PATH} .
COPY packages ../packages
COPY turbo.json ../
COPY package*.json ../

# Install all dependencies including dev for building
RUN npm ci

# Build TypeScript
RUN npm run build

# Stage 3: Runner
FROM node:20-alpine AS runner
WORKDIR /app

# Install runtime dependencies
RUN apk add --no-cache libc6-compat curl

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 apiuser

# Copy built application
COPY --from=builder --chown=apiuser:nodejs /app/dist ./dist
COPY --from=builder --chown=apiuser:nodejs /app/package*.json ./
COPY --from=deps --chown=apiuser:nodejs /app/node_modules ./node_modules

# Create upload directory for work-order-service
RUN mkdir -p /app/uploads && chown -R apiuser:nodejs /app/uploads

USER apiuser

# Service port (will be overridden by docker-compose)
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT:-3001}/health || exit 1

CMD ["node", "dist/index.js"]