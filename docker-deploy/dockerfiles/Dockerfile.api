# Simplified API Dockerfile for E-Maintenance Services
FROM node:20-alpine AS base
WORKDIR /app
RUN apk add --no-cache libc6-compat openssl curl

# Install all dependencies including workspace packages
COPY package*.json ./
COPY turbo.json ./
COPY packages/ ./packages/

# Copy the specific service
ARG SERVICE_PATH
ARG SERVICE_NAME  
COPY ${SERVICE_PATH}/${SERVICE_NAME}/ ./apps/api/${SERVICE_NAME}/

# Install dependencies
RUN npm install

# Generate Prisma client
WORKDIR /app/packages/database
RUN npx prisma generate

# Build the service
WORKDIR /app/apps/api/${SERVICE_NAME}
RUN npm run build || (mkdir -p dist && cp -r src/* dist/ 2>/dev/null)

# Runtime stage
FROM node:20-alpine AS runner
ARG SERVICE_NAME
RUN apk add --no-cache curl
RUN addgroup --system --gid 1001 nodejs && adduser --system --uid 1001 apiuser
WORKDIR /app

# Copy built application and dependencies
COPY --from=base /app/node_modules ./node_modules
COPY --from=base /app/packages ./packages  
COPY --from=base --chown=apiuser:nodejs /app/apps/api/${SERVICE_NAME}/dist ./dist
COPY --from=base /app/apps/api/${SERVICE_NAME}/package*.json ./

RUN mkdir -p /app/uploads /app/logs && chown -R apiuser:nodejs /app/uploads /app/logs

ARG SERVICE_PORT
ENV PORT=${SERVICE_PORT:-3001}
ENV NODE_ENV=production

USER apiuser

HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:${SERVICE_PORT:-3001}/health || exit 1

CMD ["node", "dist/index.js"]