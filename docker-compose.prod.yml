version: '3.8'

services:
  # PostgreSQL Database - Production Configuration
  database:
    image: postgres:16-alpine
    container_name: emaintenance-db-prod
    environment:
      POSTGRES_DB: emaintenance
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./docker/database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - emaintenance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: [
      "postgres",
      "-c", "max_connections=200",
      "-c", "shared_buffers=256MB",
      "-c", "effective_cache_size=1GB",
      "-c", "work_mem=16MB",
      "-c", "maintenance_work_mem=128MB"
    ]
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Redis Cache - Production Configuration
  redis:
    image: redis:7-alpine
    container_name: emaintenance-redis-prod
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_prod:/data
    networks:
      - emaintenance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # User Service API - Production
  user-service:
    build:
      context: ./apps/api/user-service
      dockerfile: Dockerfile
      target: runtime
    container_name: emaintenance-user-service-prod
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: warn
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - emaintenance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
      replicas: 2

  # Work Order Service API - Production
  work-order-service:
    build:
      context: ./apps/api/work-order-service
      dockerfile: Dockerfile
      target: runtime
    container_name: emaintenance-work-order-service-prod
    environment:
      NODE_ENV: production
      PORT: 3002
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      USER_SERVICE_URL: http://user-service:3001
      ASSET_SERVICE_URL: http://asset-service:3003
      LOG_LEVEL: warn
    depends_on:
      - database
      - user-service
    networks:
      - emaintenance-network
    restart: unless-stopped
    volumes:
      - work_order_uploads_prod:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Asset Service API - Production
  asset-service:
    build:
      context: ./apps/api/asset-service
      dockerfile: Dockerfile
      target: runtime
    container_name: emaintenance-asset-service-prod
    environment:
      NODE_ENV: production
      PORT: 3003
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      USER_SERVICE_URL: http://user-service:3001
      LOG_LEVEL: warn
    depends_on:
      - database
      - user-service
    networks:
      - emaintenance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Next.js Web Application - Production
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      target: runner
    container_name: emaintenance-web-prod
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_USER_SERVICE_URL: ${NEXT_PUBLIC_USER_SERVICE_URL}
      NEXT_PUBLIC_WORK_ORDER_SERVICE_URL: ${NEXT_PUBLIC_WORK_ORDER_SERVICE_URL}
      NEXT_PUBLIC_ASSET_SERVICE_URL: ${NEXT_PUBLIC_ASSET_SERVICE_URL}
      PORT: 3000
    depends_on:
      - user-service
      - work-order-service
      - asset-service
    networks:
      - emaintenance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: emaintenance-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
      - user-service
      - work-order-service
      - asset-service
    networks:
      - emaintenance-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # Database Migration Tool
  db-migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    container_name: emaintenance-db-migrate-prod
    environment:
      DATABASE_URL: ${DATABASE_URL}
      NODE_ENV: production
    depends_on:
      database:
        condition: service_healthy
    networks:
      - emaintenance-network
    profiles:
      - tools
    command: >
      sh -c "
        echo 'Running database migrations...' &&
        npm run db:generate &&
        npm run db:migrate &&
        npm run db:seed &&
        echo 'Database setup completed!'
      "

  # Log Aggregation (Optional)
  fluentd:
    image: fluentd:v1.16-debian-1
    container_name: emaintenance-logs-prod
    volumes:
      - ./docker/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - app_logs:/var/log/app
    networks:
      - emaintenance-network
    restart: unless-stopped
    profiles:
      - logging
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

volumes:
  postgres_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/emaintenance_postgres_prod
  redis_data_prod:
    driver: local
  work_order_uploads_prod:
    driver: local
  app_logs:
    driver: local

networks:
  emaintenance-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16