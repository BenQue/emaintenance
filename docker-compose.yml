version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:16-alpine
    container_name: emaintenance-db
    environment:
      POSTGRES_DB: emaintenance
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-Qzy@7091!}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/database/init:/docker-entrypoint-initdb.d
    networks:
      - emaintenance-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (for future use)
  redis:
    image: redis:7-alpine
    container_name: emaintenance-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - emaintenance-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # User Service API
  user-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: user-service
    container_name: emaintenance-user-service
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-Qzy@7091!}@database:5432/emaintenance
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-key}
      REDIS_URL: redis://redis:6379
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - emaintenance-network
    volumes:
      - ./apps/api/user-service/src:/app/src:ro
    command: npm run dev

  # Work Order Service API
  work-order-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: work-order-service
    container_name: emaintenance-work-order-service
    environment:
      NODE_ENV: development
      PORT: 3002
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-Qzy@7091!}@database:5432/emaintenance
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-key}
      USER_SERVICE_URL: http://user-service:3001
      ASSET_SERVICE_URL: http://asset-service:3003
    ports:
      - "3002:3002"
    depends_on:
      - database
      - user-service
    networks:
      - emaintenance-network
    volumes:
      - ./apps/api/work-order-service/src:/app/src:ro
      - work_order_uploads:/app/uploads
    command: npm run dev

  # Asset Service API
  asset-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: asset-service
    container_name: emaintenance-asset-service
    environment:
      NODE_ENV: development
      PORT: 3003
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-Qzy@7091!}@database:5432/emaintenance
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-key}
      USER_SERVICE_URL: http://user-service:3001
    ports:
      - "3003:3003"
    depends_on:
      - database
      - user-service
    networks:
      - emaintenance-network
    volumes:
      - ./apps/api/asset-service/src:/app/src:ro
    command: npm run dev

  # Next.js Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: web
    container_name: emaintenance-web
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_USER_SERVICE_URL: http://localhost:3001
      NEXT_PUBLIC_WORK_ORDER_SERVICE_URL: http://localhost:3002
      NEXT_PUBLIC_ASSET_SERVICE_URL: http://localhost:3003
    ports:
      - "3000:3000"
    depends_on:
      - user-service
      - work-order-service
      - asset-service
    networks:
      - emaintenance-network
    volumes:
      - ./apps/web:/app:ro
      - /app/node_modules
      - /app/.next
    command: npm run dev

  # Database Migration Tool (run once)
  db-migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    container_name: emaintenance-db-migrate
    environment:
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-Qzy@7091!}@database:5432/emaintenance
    depends_on:
      database:
        condition: service_healthy
    networks:
      - emaintenance-network
    profiles:
      - tools
    command: >
      sh -c "
        npm run db:generate &&
        npm run db:push &&
        npm run db:seed
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  work_order_uploads:
    driver: local

networks:
  emaintenance-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16