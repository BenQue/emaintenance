services:
  # PostgreSQL Database
  database:
    image: postgres:16-alpine
    container_name: emaintenance-db-simple
    environment:
      POSTGRES_DB: emaintenance
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-Qzy@7091!}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data_simple:/var/lib/postgresql/data
      - ./docker/database/init:/docker-entrypoint-initdb.d
    networks:
      - emaintenance-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: emaintenance-redis-simple
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data_simple:/data
    networks:
      - emaintenance-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # User Service API (using ts-node in development)
  user-service:
    image: node:20-bullseye
    container_name: emaintenance-user-service-simple
    working_dir: /app
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-Qzy@7091!}@database:5432/emaintenance
      JWT_SECRET: ${JWT_SECRET:-emaintenance-development-jwt-secret-key-2025-docker}
      REDIS_URL: redis://redis:6379
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - emaintenance-network
    volumes:
      - .:/app
      - user_service_node_modules:/app/node_modules
    command: >
      sh -c "
        npm install &&
        npm install -g ts-node nodemon &&
        npm run db:generate &&
        cd apps/api/user-service &&
        nodemon --exec 'npx ts-node --transpile-only src/index.ts' --watch src --ext ts,js,json
      "
    restart: unless-stopped

  # Asset Service API (using ts-node in development)
  asset-service:
    image: node:20-bullseye
    container_name: emaintenance-asset-service-simple
    working_dir: /app
    environment:
      NODE_ENV: development
      PORT: 3003
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-Qzy@7091!}@database:5432/emaintenance
      JWT_SECRET: ${JWT_SECRET:-emaintenance-development-jwt-secret-key-2025-docker}
      USER_SERVICE_URL: http://user-service:3001
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "3003:3003"
    depends_on:
      - database
      - user-service
    networks:
      - emaintenance-network
    volumes:
      - .:/app
      - asset_service_node_modules:/app/node_modules
    command: >
      sh -c "
        apt-get update && apt-get install -y curl &&
        npm install &&
        npm run db:generate &&
        cd apps/api/asset-service &&
        node dist/index.js
      "
    restart: unless-stopped

  # Work Order Service API
  work-order-service:
    image: node:20-bullseye
    container_name: emaintenance-work-order-service-simple
    working_dir: /app
    environment:
      NODE_ENV: development
      PORT: 3002
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-Qzy@7091!}@database:5432/emaintenance
      JWT_SECRET: ${JWT_SECRET:-emaintenance-development-jwt-secret-key-2025-docker}
      USER_SERVICE_URL: http://user-service:3001
      ASSET_SERVICE_URL: http://asset-service:3003
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "3002:3002"
    depends_on:
      - database
      - user-service
    networks:
      - emaintenance-network
    volumes:
      - .:/app
      - work_order_service_node_modules:/app/node_modules
    command: >
      sh -c "
        npm install &&
        npm install -g ts-node &&
        npm run db:generate &&
        cd apps/api/work-order-service &&
        npx ts-node --transpile-only src/index.ts
      "
    restart: unless-stopped

  # Next.js Web Application (development mode)
  web:
    image: node:20-alpine
    container_name: emaintenance-web-simple
    working_dir: /app/apps/web
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_USER_SERVICE_URL: http://localhost:3001
      NEXT_PUBLIC_WORK_ORDER_SERVICE_URL: http://localhost:3002
      NEXT_PUBLIC_ASSET_SERVICE_URL: http://localhost:3003
    ports:
      - "3000:3000"
    depends_on:
      - user-service
      - asset-service
    networks:
      - emaintenance-network
    volumes:
      - .:/app
      - web_node_modules:/app/apps/web/node_modules
      - web_next:/app/apps/web/.next
    command: >
      sh -c "
        apk add --no-cache libc6-compat &&
        npm install &&
        npm run dev
      "
    restart: unless-stopped

volumes:
  postgres_data_simple:
    driver: local
  redis_data_simple:
    driver: local
  user_service_node_modules:
    driver: local
  asset_service_node_modules:
    driver: local
  work_order_service_node_modules:
    driver: local
  web_node_modules:
    driver: local
  web_next:
    driver: local

networks:
  emaintenance-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16