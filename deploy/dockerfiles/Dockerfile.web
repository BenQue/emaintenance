# Multi-stage Dockerfile for Next.js Web Application (Production Optimized)

ARG NODE_VERSION=18

# Build stage
FROM node:${NODE_VERSION}-alpine AS builder

# Install build dependencies
RUN apk add --no-cache libc6-compat python3 make g++

WORKDIR /repo

# Copy package files for dependency installation
COPY package*.json ./
COPY apps/web/package*.json apps/web/
COPY packages/database/package*.json packages/database/
COPY packages/eslint-config/package*.json packages/eslint-config/
COPY packages/typescript-config/package*.json packages/typescript-config/

# Install dependencies
RUN npm ci

# Copy source code
COPY . .

# Build shared packages first
RUN cd packages/database && npm run build

# Generate Prisma client
RUN cd packages/database && npx prisma generate

# Build Next.js application with standalone output
RUN cd apps/web && npm run build

# Runtime stage
FROM node:${NODE_VERSION}-alpine AS runtime

# Install runtime dependencies
RUN apk add --no-cache \
    libc6-compat \
    curl \
    ca-certificates \
    tzdata \
    tini

# Set timezone
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

WORKDIR /app

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy Next.js standalone build
COPY --from=builder --chown=nextjs:nodejs /repo/apps/web/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /repo/apps/web/.next/static ./apps/web/.next/static
COPY --from=builder --chown=nextjs:nodejs /repo/apps/web/public ./apps/web/public

# Copy database artifacts for runtime
COPY --from=builder --chown=nextjs:nodejs /repo/packages/database ./packages/database

# Create necessary directories
RUN mkdir -p /app/logs && chown -R nextjs:nodejs /app/logs

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Use tini as PID 1
ENTRYPOINT ["/sbin/tini", "--"]

# Start Next.js
CMD ["node", "apps/web/server.js"]