version: '3.8'

networks:
  emaintenance-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  uploads-data:

services:
  # Database
  postgres:
    image: postgres:16
    container_name: emaintenance-postgres-prod
    environment:
      POSTGRES_DB: emaintenance
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - /opt/emaintenance/data/postgres:/var/lib/postgresql/backup
    networks:
      - emaintenance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: emaintenance-redis-prod
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
      - /opt/emaintenance/data/redis:/backup
    networks:
      - emaintenance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # User Service
  user-service:
    build:
      context: ..
      dockerfile: deploy/dockerfiles/Dockerfile.api
      args:
        SERVICE_NAME: user-service
    container_name: emaintenance-user-service-prod
    environment:
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      REDIS_URL: ${REDIS_URL}
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
    ports:
      - "${USER_SERVICE_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - emaintenance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Work Order Service
  work-order-service:
    build:
      context: ..
      dockerfile: deploy/dockerfiles/Dockerfile.api
      args:
        SERVICE_NAME: work-order-service
    container_name: emaintenance-work-order-service-prod
    environment:
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      REDIS_URL: ${REDIS_URL}
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3002
      USER_SERVICE_URL: ${USER_SERVICE_URL}
    ports:
      - "${WORK_ORDER_SERVICE_PORT:-3002}:3002"
    volumes:
      - uploads-data:/app/uploads
      - /opt/emaintenance/data/uploads:/backup/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - emaintenance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Asset Service
  asset-service:
    build:
      context: ..
      dockerfile: deploy/dockerfiles/Dockerfile.api
      args:
        SERVICE_NAME: asset-service
    container_name: emaintenance-asset-service-prod
    environment:
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      REDIS_URL: ${REDIS_URL}
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3003
      USER_SERVICE_URL: ${USER_SERVICE_URL}
    ports:
      - "${ASSET_SERVICE_PORT:-3003}:3003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - emaintenance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Web Application
  web:
    build:
      context: ..
      dockerfile: deploy/dockerfiles/Dockerfile.web
    container_name: emaintenance-web-prod
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_USER_SERVICE_URL: ${NEXT_PUBLIC_USER_SERVICE_URL}
      NEXT_PUBLIC_WORK_ORDER_SERVICE_URL: ${NEXT_PUBLIC_WORK_ORDER_SERVICE_URL}
      NEXT_PUBLIC_ASSET_SERVICE_URL: ${NEXT_PUBLIC_ASSET_SERVICE_URL}
      NODE_ENV: ${NODE_ENV:-production}
    ports:
      - "${WEB_PORT:-3000}:3000"
    depends_on:
      user-service:
        condition: service_healthy
      work-order-service:
        condition: service_healthy
      asset-service:
        condition: service_healthy
    networks:
      - emaintenance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: emaintenance-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - /opt/emaintenance/logs/nginx:/var/log/nginx
      # SSL certificates (uncomment when ready)
      # - /opt/emaintenance/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
      - user-service
      - work-order-service
      - asset-service
    networks:
      - emaintenance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"