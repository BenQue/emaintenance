version: '3.8'

# 前端模块：Web应用、静态资源服务
# 依赖基础设施和微服务模块

networks:
  # 连接到主网络
  emaintenance-network:
    name: emaintenance-network
    external: true
  
  # 前端内部网络  
  frontend-internal:
    name: emaintenance-frontend
    driver: bridge

services:
  # Next.js Web应用 - 主实例
  web-1:
    build:
      context: ../..
      dockerfile: apps/web/Dockerfile
      target: ${BUILD_TARGET:-production}
      args:
        NODE_ENV: ${NODE_ENV:-production}
        BUILD_VERSION: ${BUILD_VERSION:-latest}
    image: emaintenance/web-app:${IMAGE_TAG:-latest}
    container_name: emaintenance-web-1
    restart: unless-stopped
    environment:
      # 环境标识
      NODE_ENV: ${NODE_ENV:-production}
      RUNNING_IN_DOCKER: "true"
      
      # API配置 - 通过Nginx网关访问
      NEXT_PUBLIC_API_GATEWAY_URL: ${API_GATEWAY_URL:-}
      NEXT_PUBLIC_API_URL: ""
      NEXT_PUBLIC_USER_SERVICE_URL: ""
      NEXT_PUBLIC_WORK_ORDER_SERVICE_URL: ""
      NEXT_PUBLIC_ASSET_SERVICE_URL: ""
      
      # 应用配置
      APP_NAME: ${APP_NAME:-E-Maintenance}
      APP_VERSION: ${APP_VERSION:-1.0.0}
      APP_DESCRIPTION: ${APP_DESCRIPTION:-企业设备维修管理系统}
      
      # Next.js配置
      NEXT_TELEMETRY_DISABLED: 1
      PORT: 3000
      
      # 静态资源配置
      NEXT_PUBLIC_STATIC_URL: ${STATIC_URL:-}
      NEXT_PUBLIC_CDN_URL: ${CDN_URL:-}
      NEXT_PUBLIC_UPLOAD_URL: ${UPLOAD_URL:-/uploads}
      
      # 功能开关
      NEXT_PUBLIC_QR_CODE_ENABLED: ${QR_CODE_ENABLED:-true}
      NEXT_PUBLIC_PWA_ENABLED: ${PWA_ENABLED:-true}
      NEXT_PUBLIC_ANALYTICS_ENABLED: ${ANALYTICS_ENABLED:-false}
      
      # 安全配置
      NEXT_PUBLIC_SECURITY_HEADERS_ENABLED: ${SECURITY_HEADERS_ENABLED:-true}
      NEXT_PUBLIC_CSP_ENABLED: ${CSP_ENABLED:-true}
      
      # 开发模式配置
      NEXT_PUBLIC_DEBUG_MODE: ${DEBUG_MODE:-false}
      
      # 移动端支持
      NEXT_PUBLIC_MOBILE_API_HOST: ${MOBILE_API_HOST:-localhost}
      NEXT_PUBLIC_MOBILE_API_PORT: ${MOBILE_API_PORT:-80}
      NEXT_PUBLIC_MOBILE_API_PROTOCOL: ${MOBILE_API_PROTOCOL:-http}
      
      # 多语言支持
      NEXT_PUBLIC_DEFAULT_LOCALE: ${DEFAULT_LOCALE:-zh}
      NEXT_PUBLIC_SUPPORTED_LOCALES: ${SUPPORTED_LOCALES:-zh,en}
    
    ports:
      - "${WEB_PORT:-3000}:3000"
    
    networks:
      - emaintenance-network
      - frontend-internal
    
    depends_on:
      - microservices-ready
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 90s
    
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        tag: "web-1"
    
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '0.75'
        reservations:
          memory: 512m
          cpus: '0.5'
      
      # 滚动更新策略
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      
      # 重启策略
      restart_policy:
        condition: unless-stopped
        delay: 5s
        max_attempts: 3
        window: 60s
    
    volumes:
      - ../logs:/app/.next/logs
      # Next.js缓存持久化（可选）
      - web-cache:/app/.next/cache
    
    # 安全配置
    user: "nextjs:nextjs"
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=100m

  # Web应用备份实例（可选 - 用于高可用部署）
  web-2:
    extends:
      service: web-1
    container_name: emaintenance-web-2
    ports:
      - "${WEB_BACKUP_PORT:-3001}:3000"
    profiles:
      - high-availability
    environment:
      INSTANCE_ID: web-2
      INSTANCE_ROLE: backup

  # 静态文件服务器（可选 - 用于CDN或独立静态资源）
  static-server:
    image: nginx:alpine
    container_name: emaintenance-static-server
    restart: unless-stopped
    profiles:
      - cdn
      - static-server
    ports:
      - "${STATIC_SERVER_PORT:-8080}:80"
    volumes:
      - static-files:/usr/share/nginx/html:ro
      - ./configs/static-nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - frontend-internal
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 128m
          cpus: '0.1'

  # PWA服务工作器（可选 - 用于离线支持）
  pwa-worker:
    build:
      context: ../..
      dockerfile: apps/web/Dockerfile.worker
    container_name: emaintenance-pwa-worker
    restart: unless-stopped
    profiles:
      - pwa
      - offline
    environment:
      WORKER_MODE: pwa
      CACHE_STRATEGY: ${PWA_CACHE_STRATEGY:-networkFirst}
      OFFLINE_FALLBACK: ${OFFLINE_FALLBACK:-true}
    networks:
      - frontend-internal
    depends_on:
      - web-1
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "2"

  # 前端资产构建器（开发模式）
  asset-builder:
    build:
      context: ../..
      dockerfile: apps/web/Dockerfile.dev
      target: builder
    container_name: emaintenance-asset-builder
    restart: "no"
    profiles:
      - development
      - build-assets
    environment:
      NODE_ENV: development
      WATCH_MODE: ${WATCH_MODE:-true}
    volumes:
      - ../../apps/web:/app
      - web-node-modules:/app/node_modules
      - static-files:/app/.next/static
    networks:
      - frontend-internal
    command: ["npm", "run", "build:watch"]

  # 微服务就绪检查
  microservices-ready:
    image: curlimages/curl:latest
    container_name: microservices-ready-check
    networks:
      - emaintenance-network
    command: |
      sh -c "
        echo 'Waiting for microservices to be ready...' &&
        until curl -f http://emaintenance-user-service-1:3001/health; do
          echo 'User service not ready, waiting...'
          sleep 5
        done &&
        until curl -f http://emaintenance-work-order-service-1:3002/health; do
          echo 'Work order service not ready, waiting...'
          sleep 5  
        done &&
        until curl -f http://emaintenance-asset-service-1:3003/api/health; do
          echo 'Asset service not ready, waiting...'
          sleep 5
        done &&
        echo 'All microservices are ready!'
      "
    depends_on:
      - user-service-external
      - work-order-service-external
      - asset-service-external

  # 外部服务依赖声明（实际容器在microservices模块中）
  user-service-external:
    image: emaintenance/user-service:${IMAGE_TAG:-latest}
    container_name: emaintenance-user-service-1
    external_links:
      - emaintenance-user-service-1
    networks:
      - emaintenance-network

  work-order-service-external:
    image: emaintenance/work-order-service:${IMAGE_TAG:-latest}
    container_name: emaintenance-work-order-service-1
    external_links:
      - emaintenance-work-order-service-1
    networks:
      - emaintenance-network

  asset-service-external:
    image: emaintenance/asset-service:${IMAGE_TAG:-latest}
    container_name: emaintenance-asset-service-1
    external_links:
      - emaintenance-asset-service-1
    networks:
      - emaintenance-network

# 卷定义
volumes:
  # Web应用缓存
  web-cache:
    name: emaintenance-web-cache
    driver: local
  
  # Node.js模块（开发模式）
  web-node-modules:
    name: emaintenance-web-node-modules
    driver: local
    
  # 静态文件
  static-files:
    name: emaintenance-static-files
    driver: local

# 服务模板（用于扩展）
x-web-app-template: &web-app-template
  image: emaintenance/web-app:${IMAGE_TAG:-latest}
  restart: unless-stopped
  networks:
    - emaintenance-network
    - frontend-internal
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
    interval: 30s
    timeout: 15s
    retries: 3
    start_period: 90s
  logging:
    driver: "json-file"
    options:
      max-size: "100m" 
      max-file: "5"
  deploy:
    resources:
      limits:
        memory: 1g
        cpus: '0.75'
      reservations:
        memory: 512m
        cpus: '0.5'
  security_opt:
    - no-new-privileges:true
  user: "nextjs:nextjs"