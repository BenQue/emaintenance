version: '3.8'

# 微服务模块：用户服务、工单服务、资产服务
# 依赖基础设施模块中的数据库和缓存服务

networks:
  # 连接到基础设施网络
  emaintenance-network:
    name: emaintenance-network
    external: true
  
  # 内部微服务通信网络
  microservices-internal:
    name: emaintenance-microservices
    driver: bridge

services:
  # 用户服务 - 认证和用户管理
  user-service-1:
    build:
      context: ../..
      dockerfile: apps/api/user-service/Dockerfile
      args:
        SERVICE_NAME: user-service
        BUILD_TARGET: ${BUILD_TARGET:-production}
    image: emaintenance/user-service:${IMAGE_TAG:-latest}
    container_name: emaintenance-user-service-1
    restart: unless-stopped
    environment:
      # 数据库连接
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@emaintenance-postgres:5432/${POSTGRES_DB:-emaintenance}
      
      # Redis连接
      REDIS_URL: redis://${REDIS_PASSWORD:+:${REDIS_PASSWORD}@}emaintenance-redis:6379
      
      # JWT配置
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      
      # 服务配置
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      SERVICE_NAME: user-service
      
      # 服务发现
      SERVICE_REGISTRY_URL: ${SERVICE_REGISTRY_URL:-}
      
      # 日志级别
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # 健康检查
      HEALTH_CHECK_INTERVAL: 30000
      
      # 安全配置
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      SESSION_SECRET: ${SESSION_SECRET:-}
      
      # 邮件配置（可选）
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
    
    ports:
      - "${USER_SERVICE_PORT:-3001}:3001"
    
    networks:
      - emaintenance-network
      - microservices-internal
    
    depends_on:
      - postgres-ready
      - redis-ready
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
        tag: "user-service-1"
    
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: '0.5'
        reservations:
          memory: 256m
          cpus: '0.25'
    
    # 配置文件挂载
    volumes:
      - ../configs/user-service.yml:/app/config/production.yml:ro
      - ../logs:/app/logs
    
    # 安全配置
    user: "node:node"
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,nodev

  # 工单服务 - 工单管理和工作流
  work-order-service-1:
    build:
      context: ../..
      dockerfile: apps/api/work-order-service/Dockerfile
      args:
        SERVICE_NAME: work-order-service
        BUILD_TARGET: ${BUILD_TARGET:-production}
    image: emaintenance/work-order-service:${IMAGE_TAG:-latest}
    container_name: emaintenance-work-order-service-1
    restart: unless-stopped
    environment:
      # 数据库连接
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@emaintenance-postgres:5432/${POSTGRES_DB:-emaintenance}
      
      # Redis连接
      REDIS_URL: redis://${REDIS_PASSWORD:+:${REDIS_PASSWORD}@}emaintenance-redis:6379
      
      # JWT配置
      JWT_SECRET: ${JWT_SECRET}
      
      # 服务间通信
      USER_SERVICE_URL: http://emaintenance-user-service-1:3001
      ASSET_SERVICE_URL: http://emaintenance-asset-service-1:3003
      
      # 服务配置
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3002
      SERVICE_NAME: work-order-service
      
      # 文件上传配置
      UPLOAD_MAX_SIZE: ${UPLOAD_MAX_SIZE:-50mb}
      UPLOAD_DIR: /app/uploads
      
      # 通知配置
      NOTIFICATION_ENABLED: ${NOTIFICATION_ENABLED:-true}
      EMAIL_ENABLED: ${EMAIL_ENABLED:-false}
      WEBHOOK_ENABLED: ${WEBHOOK_ENABLED:-false}
      
      # 工作流配置
      WORKFLOW_ENABLED: ${WORKFLOW_ENABLED:-true}
      AUTO_ASSIGNMENT_ENABLED: ${AUTO_ASSIGNMENT_ENABLED:-true}
      
      # 日志级别
      LOG_LEVEL: ${LOG_LEVEL:-info}
    
    ports:
      - "${WORK_ORDER_SERVICE_PORT:-3002}:3002"
    
    networks:
      - emaintenance-network
      - microservices-internal
    
    depends_on:
      - postgres-ready
      - redis-ready
      - user-service-1
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
        tag: "work-order-service-1"
    
    deploy:
      resources:
        limits:
          memory: 768m
          cpus: '0.75'
        reservations:
          memory: 384m
          cpus: '0.5'
    
    volumes:
      - emaintenance-uploads-data:/app/uploads
      - ../configs/work-order-service.yml:/app/config/production.yml:ro
      - ../logs:/app/logs
    
    user: "node:node"
    security_opt:
      - no-new-privileges:true

  # 资产服务 - 资产管理和QR码
  asset-service-1:
    build:
      context: ../..
      dockerfile: apps/api/asset-service/Dockerfile
      args:
        SERVICE_NAME: asset-service
        BUILD_TARGET: ${BUILD_TARGET:-production}
    image: emaintenance/asset-service:${IMAGE_TAG:-latest}
    container_name: emaintenance-asset-service-1
    restart: unless-stopped
    environment:
      # 数据库连接
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@emaintenance-postgres:5432/${POSTGRES_DB:-emaintenance}
      
      # Redis连接
      REDIS_URL: redis://${REDIS_PASSWORD:+:${REDIS_PASSWORD}@}emaintenance-redis:6379
      
      # JWT配置
      JWT_SECRET: ${JWT_SECRET}
      
      # 服务间通信
      USER_SERVICE_URL: http://emaintenance-user-service-1:3001
      
      # 服务配置
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3003
      SERVICE_NAME: asset-service
      
      # QR码配置
      QR_CODE_ENABLED: ${QR_CODE_ENABLED:-true}
      QR_CODE_BASE_URL: ${QR_CODE_BASE_URL:-http://localhost}
      
      # 资产图片配置
      ASSET_IMAGE_MAX_SIZE: ${ASSET_IMAGE_MAX_SIZE:-10mb}
      ASSET_IMAGE_DIR: /app/uploads/assets
      
      # 日志级别
      LOG_LEVEL: ${LOG_LEVEL:-info}
    
    ports:
      - "${ASSET_SERVICE_PORT:-3003}:3003"
    
    networks:
      - emaintenance-network
      - microservices-internal
    
    depends_on:
      - postgres-ready
      - redis-ready
      - user-service-1
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
        tag: "asset-service-1"
    
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: '0.5'
        reservations:
          memory: 256m
          cpus: '0.25'
    
    volumes:
      - emaintenance-uploads-data:/app/uploads
      - ../configs/asset-service.yml:/app/config/production.yml:ro
      - ../logs:/app/logs
    
    user: "node:node"
    security_opt:
      - no-new-privileges:true

  # 服务健康检查等待器
  postgres-ready:
    image: postgres:16-alpine
    container_name: postgres-ready-check
    networks:
      - emaintenance-network
    command: ["sh", "-c", "until pg_isready -h emaintenance-postgres -p 5432 -U ${POSTGRES_USER:-postgres}; do sleep 2; done"]
    depends_on:
      - postgres-external

  redis-ready:
    image: redis:7-alpine
    container_name: redis-ready-check
    networks:
      - emaintenance-network
    command: ["sh", "-c", "until redis-cli -h emaintenance-redis -p 6379 ping | grep PONG; do sleep 2; done"]
    depends_on:
      - redis-external

  # 外部服务依赖声明（实际容器在infrastructure模块中）
  postgres-external:
    image: postgres:16-alpine
    container_name: emaintenance-postgres
    external_links:
      - emaintenance-postgres
    networks:
      - emaintenance-network

  redis-external:
    image: redis:7-alpine
    container_name: emaintenance-redis
    external_links:
      - emaintenance-redis
    networks:
      - emaintenance-network

# 外部卷引用（在infrastructure模块中定义）
volumes:
  emaintenance-uploads-data:
    external: true
    name: emaintenance-uploads-data

# 微服务扩展配置（可选 - 用于高可用部署）
x-microservice-template: &microservice-template
  restart: unless-stopped
  networks:
    - emaintenance-network
    - microservices-internal
  logging:
    driver: "json-file"
    options:
      max-size: "100m"
      max-file: "3"
  security_opt:
    - no-new-privileges:true
  read_only: false