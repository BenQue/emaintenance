# E-Maintenance 分模块部署 - Nginx配置
# 支持动态服务发现和负载均衡

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    log_format json_combined escape=json
        '{'
          '"time_local":"$time_local",'
          '"remote_addr":"$remote_addr",'
          '"remote_user":"$remote_user",'
          '"request":"$request",'
          '"status": "$status",'
          '"body_bytes_sent":"$body_bytes_sent",'
          '"request_time":"$request_time",'
          '"http_referrer":"$http_referer",'
          '"http_user_agent":"$http_user_agent"'
        '}';

    access_log /var/log/nginx/access.log main;

    # 性能优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;

    # 客户端配置
    client_max_body_size 50m;
    client_body_buffer_size 16k;
    client_header_buffer_size 4k;
    large_client_header_buffers 8 16k;
    client_body_timeout 30s;
    client_header_timeout 30s;
    send_timeout 30s;

    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        text/json
        application/javascript
        application/xml+rss
        application/json
        application/xml
        image/svg+xml;

    # 安全头
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # 限流配置
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;
    limit_req_zone $binary_remote_addr zone=web:10m rate=60r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

    # 上游服务组定义
    # 用户服务集群
    upstream user_service {
        least_conn;
        # 支持多实例负载均衡
        server emaintenance-user-service-1:3001 max_fails=3 fail_timeout=30s;
        # server emaintenance-user-service-2:3001 max_fails=3 fail_timeout=30s backup;
        
        # 健康检查（nginx-plus功能，开源版本使用外部健康检查）
        # health_check interval=30s fails=3 passes=2 uri=/health;
        
        # 保持活动连接
        keepalive 32;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }

    # 工单服务集群  
    upstream work_order_service {
        least_conn;
        server emaintenance-work-order-service-1:3002 max_fails=3 fail_timeout=30s;
        # server emaintenance-work-order-service-2:3002 max_fails=3 fail_timeout=30s backup;
        
        keepalive 32;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }

    # 资产服务集群
    upstream asset_service {
        least_conn;
        server emaintenance-asset-service-1:3003 max_fails=3 fail_timeout=30s;
        # server emaintenance-asset-service-2:3003 max_fails=3 fail_timeout=30s backup;
        
        keepalive 32;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }

    # Web前端服务集群
    upstream web_frontend {
        least_conn;
        server emaintenance-web-1:3000 max_fails=3 fail_timeout=30s;
        # server emaintenance-web-2:3000 max_fails=3 fail_timeout=30s backup;
        
        keepalive 32;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }

    # 缓存配置
    proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:10m 
                     max_size=1g inactive=60m use_temp_path=off;

    # 主服务器配置
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;

        # 根路径返回健康检查
        location = /health {
            access_log off;
            return 200 '{"status":"ok","timestamp":"$time_iso8601","server":"nginx"}';
            add_header Content-Type application/json;
        }

        # =============================================================
        # 移动端 API 路由（Android PDA 使用）
        # =============================================================
        
        # 移动端 - 用户服务路由
        location ~ ^/user-service/api(.*)$ {
            limit_req zone=auth burst=10 nodelay;
            
            proxy_pass http://user_service/api$1$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            
            # 超时设置
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # 错误处理
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
        }

        # 移动端 - 工单服务路由
        location ~ ^/work-order-service/api(.*)$ {
            limit_req zone=api burst=30 nodelay;
            
            proxy_pass http://work_order_service/api$1$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 支持文件上传
            client_max_body_size 100m;
            proxy_request_buffering off;
            
            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }

        # 移动端 - 资产服务路由
        location ~ ^/asset-service/api(.*)$ {
            limit_req zone=api burst=25 nodelay;
            
            proxy_pass http://asset_service/api$1$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # =============================================================
        # Web端 API 路由（现有的，保持不变）
        # =============================================================
        
        # API路由 - 认证服务
        location ~ ^/api/auth(.*)$ {
            limit_req zone=auth burst=10 nodelay;
            
            proxy_pass http://user_service/api/auth$1$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            
            # 超时设置
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # 错误处理
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
        }

        # API路由 - 用户服务
        location ~ ^/api/users(.*)$ {
            limit_req zone=api burst=20 nodelay;
            
            # 简单缓存GET请求
            set $no_cache 0;
            if ($request_method != GET) {
                set $no_cache 1;
            }
            if ($http_authorization != "") {
                set $no_cache 1;
            }
            
            proxy_cache api_cache;
            proxy_cache_bypass $no_cache;
            proxy_no_cache $no_cache;
            proxy_cache_valid 200 5m;
            proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
            
            proxy_pass http://user_service/api/users$1$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # API路由 - 系统设置服务
        location ~ ^/api/settings(.*)$ {
            limit_req zone=api burst=15 nodelay;
            
            proxy_pass http://user_service/api/settings$1$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # API路由 - 工单服务
        location ~ ^/api/work-orders(.*)$ {
            limit_req zone=api burst=30 nodelay;
            
            proxy_pass http://work_order_service/api/work-orders$1$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 支持文件上传
            client_max_body_size 100m;
            proxy_request_buffering off;
            
            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }

        # API路由 - 通知服务
        location ~ ^/api/notifications(.*)$ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://work_order_service/api/notifications$1$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # API路由 - 分配规则服务
        location ~ ^/api/assignment-rules(.*)$ {
            limit_req zone=api burst=15 nodelay;
            
            proxy_pass http://work_order_service/api/assignment-rules$1$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # API路由 - 资产服务
        location ~ ^/api/assets(.*)$ {
            limit_req zone=api burst=25 nodelay;
            
            proxy_pass http://asset_service/api/assets$1$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # 文件上传和下载
        location /uploads/ {
            alias /var/www/uploads/;
            
            # 缓存静态文件
            expires 7d;
            add_header Cache-Control "public, no-transform";
            
            # 安全设置
            location ~* \.(php|jsp|cgi|asp|aspx)$ {
                deny all;
            }
        }

        # Next.js 静态资源
        location /_next/static/ {
            proxy_pass http://web_frontend;
            expires 1y;
            add_header Cache-Control "public, immutable";
            proxy_cache api_cache;
            proxy_cache_valid 200 1y;
        }

        # Web应用路由
        location / {
            limit_req zone=web burst=100 nodelay;
            
            proxy_pass http://web_frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Next.js 支持
            proxy_buffering off;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # 错误页面
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
        
        location = /404.html {
            root /usr/share/nginx/html;
        }
    }

    # WebSocket 升级配置
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # 包含其他配置文件
    include /etc/nginx/conf.d/*.conf;
}

# TCP/UDP 负载均衡（可选，用于数据库连接池）
# stream {
#     upstream postgres_pool {
#         server emaintenance-postgres:5432;
#     }
#     
#     server {
#         listen 5433;
#         proxy_pass postgres_pool;
#         proxy_timeout 1s;
#         proxy_responses 1;
#     }
# }