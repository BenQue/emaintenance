// Mocks generated by Mockito 5.4.6 from annotations
// in emaintenance_mobile/test/features/work_orders/work_order_completion_flow_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i7;

import 'package:emaintenance_mobile/shared/models/work_order.dart' as _i2;
import 'package:emaintenance_mobile/shared/providers/auth_provider.dart' as _i6;
import 'package:emaintenance_mobile/shared/services/work_order_service.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWorkOrder_0 extends _i1.SmartFake implements _i2.WorkOrder {
  _FakeWorkOrder_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePaginatedWorkOrders_1 extends _i1.SmartFake
    implements _i2.PaginatedWorkOrders {
  _FakePaginatedWorkOrders_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWorkOrderWithRelations_2 extends _i1.SmartFake
    implements _i2.WorkOrderWithRelations {
  _FakeWorkOrderWithRelations_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWorkOrderWithResolution_3 extends _i1.SmartFake
    implements _i2.WorkOrderWithResolution {
  _FakeWorkOrderWithResolution_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResolutionRecord_4 extends _i1.SmartFake
    implements _i2.ResolutionRecord {
  _FakeResolutionRecord_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [WorkOrderService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkOrderService extends _i1.Mock implements _i3.WorkOrderService {
  MockWorkOrderService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.WorkOrder> createWorkOrder(_i2.WorkOrderRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#createWorkOrder, [request]),
            returnValue: _i4.Future<_i2.WorkOrder>.value(
              _FakeWorkOrder_0(
                this,
                Invocation.method(#createWorkOrder, [request]),
              ),
            ),
          )
          as _i4.Future<_i2.WorkOrder>);

  @override
  _i4.Future<_i2.WorkOrder> getWorkOrder(String? workOrderId) =>
      (super.noSuchMethod(
            Invocation.method(#getWorkOrder, [workOrderId]),
            returnValue: _i4.Future<_i2.WorkOrder>.value(
              _FakeWorkOrder_0(
                this,
                Invocation.method(#getWorkOrder, [workOrderId]),
              ),
            ),
          )
          as _i4.Future<_i2.WorkOrder>);

  @override
  _i4.Future<_i2.PaginatedWorkOrders> getUserWorkOrders({
    String? type = 'assigned',
    int? page = 1,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getUserWorkOrders, [], {
              #type: type,
              #page: page,
              #limit: limit,
            }),
            returnValue: _i4.Future<_i2.PaginatedWorkOrders>.value(
              _FakePaginatedWorkOrders_1(
                this,
                Invocation.method(#getUserWorkOrders, [], {
                  #type: type,
                  #page: page,
                  #limit: limit,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.PaginatedWorkOrders>);

  @override
  _i4.Future<_i2.PaginatedWorkOrders> getAssignedWorkOrders({
    int? page = 1,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getAssignedWorkOrders, [], {
              #page: page,
              #limit: limit,
            }),
            returnValue: _i4.Future<_i2.PaginatedWorkOrders>.value(
              _FakePaginatedWorkOrders_1(
                this,
                Invocation.method(#getAssignedWorkOrders, [], {
                  #page: page,
                  #limit: limit,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.PaginatedWorkOrders>);

  @override
  _i4.Future<_i2.WorkOrderWithRelations> getWorkOrderWithHistory(
    String? workOrderId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getWorkOrderWithHistory, [workOrderId]),
            returnValue: _i4.Future<_i2.WorkOrderWithRelations>.value(
              _FakeWorkOrderWithRelations_2(
                this,
                Invocation.method(#getWorkOrderWithHistory, [workOrderId]),
              ),
            ),
          )
          as _i4.Future<_i2.WorkOrderWithRelations>);

  @override
  _i4.Future<List<_i2.WorkOrderStatusHistory>> getWorkOrderStatusHistory(
    String? workOrderId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getWorkOrderStatusHistory, [workOrderId]),
            returnValue: _i4.Future<List<_i2.WorkOrderStatusHistory>>.value(
              <_i2.WorkOrderStatusHistory>[],
            ),
          )
          as _i4.Future<List<_i2.WorkOrderStatusHistory>>);

  @override
  _i4.Future<_i2.WorkOrderWithRelations> updateWorkOrderStatus(
    String? workOrderId,
    _i2.UpdateWorkOrderStatusRequest? request,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateWorkOrderStatus, [workOrderId, request]),
            returnValue: _i4.Future<_i2.WorkOrderWithRelations>.value(
              _FakeWorkOrderWithRelations_2(
                this,
                Invocation.method(#updateWorkOrderStatus, [
                  workOrderId,
                  request,
                ]),
              ),
            ),
          )
          as _i4.Future<_i2.WorkOrderWithRelations>);

  @override
  _i4.Future<_i2.WorkOrder> updateWorkOrder(
    String? workOrderId,
    Map<String, dynamic>? updates,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateWorkOrder, [workOrderId, updates]),
            returnValue: _i4.Future<_i2.WorkOrder>.value(
              _FakeWorkOrder_0(
                this,
                Invocation.method(#updateWorkOrder, [workOrderId, updates]),
              ),
            ),
          )
          as _i4.Future<_i2.WorkOrder>);

  @override
  _i4.Future<String> uploadAttachment(String? workOrderId, String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#uploadAttachment, [workOrderId, filePath]),
            returnValue: _i4.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#uploadAttachment, [workOrderId, filePath]),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<Map<String, dynamic>> uploadWorkOrderPhotos(
    String? workOrderId,
    List<String>? photoPaths,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#uploadWorkOrderPhotos, [
              workOrderId,
              photoPaths,
            ]),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<List<Map<String, dynamic>>> getWorkOrderPhotos(
    String? workOrderId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getWorkOrderPhotos, [workOrderId]),
            returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i4.Future<List<Map<String, dynamic>>>);

  @override
  String getPhotoUrl(String? workOrderId, String? photoId) =>
      (super.noSuchMethod(
            Invocation.method(#getPhotoUrl, [workOrderId, photoId]),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.method(#getPhotoUrl, [workOrderId, photoId]),
            ),
          )
          as String);

  @override
  String getThumbnailUrl(String? workOrderId, String? photoId) =>
      (super.noSuchMethod(
            Invocation.method(#getThumbnailUrl, [workOrderId, photoId]),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.method(#getThumbnailUrl, [workOrderId, photoId]),
            ),
          )
          as String);

  @override
  _i4.Future<_i2.WorkOrderWithResolution> completeWorkOrder(
    String? workOrderId,
    _i2.CreateResolutionRequest? request,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#completeWorkOrder, [workOrderId, request]),
            returnValue: _i4.Future<_i2.WorkOrderWithResolution>.value(
              _FakeWorkOrderWithResolution_3(
                this,
                Invocation.method(#completeWorkOrder, [workOrderId, request]),
              ),
            ),
          )
          as _i4.Future<_i2.WorkOrderWithResolution>);

  @override
  _i4.Future<_i2.WorkOrderWithResolution> getWorkOrderWithResolution(
    String? workOrderId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getWorkOrderWithResolution, [workOrderId]),
            returnValue: _i4.Future<_i2.WorkOrderWithResolution>.value(
              _FakeWorkOrderWithResolution_3(
                this,
                Invocation.method(#getWorkOrderWithResolution, [workOrderId]),
              ),
            ),
          )
          as _i4.Future<_i2.WorkOrderWithResolution>);

  @override
  _i4.Future<_i2.ResolutionRecord> uploadResolutionPhotos(
    String? workOrderId,
    List<String>? photoPaths,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#uploadResolutionPhotos, [
              workOrderId,
              photoPaths,
            ]),
            returnValue: _i4.Future<_i2.ResolutionRecord>.value(
              _FakeResolutionRecord_4(
                this,
                Invocation.method(#uploadResolutionPhotos, [
                  workOrderId,
                  photoPaths,
                ]),
              ),
            ),
          )
          as _i4.Future<_i2.ResolutionRecord>);
}

/// A class which mocks [AuthProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthProvider extends _i1.Mock implements _i6.AuthProvider {
  MockAuthProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.AuthState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i6.AuthState.initial,
          )
          as _i6.AuthState);

  @override
  bool get isAuthenticated =>
      (super.noSuchMethod(
            Invocation.getter(#isAuthenticated),
            returnValue: false,
          )
          as bool);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> initializeAuth() =>
      (super.noSuchMethod(
            Invocation.method(#initializeAuth, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> login({
    required String? identifier,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#login, [], {
              #identifier: identifier,
              #password: password,
            }),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> refreshToken() =>
      (super.noSuchMethod(
            Invocation.method(#refreshToken, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
