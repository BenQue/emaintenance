# Dockerfile for User Service API (optimized for slow networks)
FROM node:20-alpine AS base

# Build stage
FROM node:18-alpine AS builder

# 使用更快的镜像源（根据服务器位置选择）
# 选项1: 阿里云（适合国内服务器）
RUN echo "https://mirrors.aliyun.com/alpine/v3.18/main" > /etc/apk/repositories && \
    echo "https://mirrors.aliyun.com/alpine/v3.18/community" >> /etc/apk/repositories
# 选项2: 清华大学源（教育网较快）
# RUN echo "https://mirrors.tuna.tsinghua.edu.cn/alpine/v3.18/main" > /etc/apk/repositories && \
#     echo "https://mirrors.tuna.tsinghua.edu.cn/alpine/v3.18/community" >> /etc/apk/repositories
# 选项3: 中科大源
# RUN echo "https://mirrors.ustc.edu.cn/alpine/v3.18/main" > /etc/apk/repositories && \
#     echo "https://mirrors.ustc.edu.cn/alpine/v3.18/community" >> /etc/apk/repositories

WORKDIR /repo

# 单独安装依赖，便于缓存和调试
RUN apk update --no-cache && \
    apk add --no-cache libc6-compat

# Copy workspace manifests to install all dependencies
COPY package*.json ./
COPY apps/api/work-order-service/package*.json apps/api/work-order-service/
COPY packages/database/package*.json packages/database/
COPY packages/eslint-config/package*.json packages/eslint-config/
COPY packages/typescript-config/package*.json packages/typescript-config/

# Install all dependencies with timeout and retry
RUN npm ci --network-timeout=300000 --fetch-retry-mintimeout=20000 --fetch-retry-maxtimeout=120000

# Copy source code
COPY . .

# Generate Prisma client first (critical for TypeScript types)
RUN cd packages/database && npx prisma generate
RUN cd packages/database && npm run build

# Verify Prisma client generation
RUN ls -la packages/database/dist/
RUN ls -la packages/database/node_modules/.prisma/ || echo "Prisma client not generated, checking for errors..."
RUN ls -la packages/database/node_modules/ || echo "No node_modules found"
RUN cd packages/database && npm list @prisma/client || echo "Prisma client not installed"

# Ensure database types are available for API build
RUN mkdir -p apps/api/work-order-service/packages/database
RUN cp -r packages/database/dist/* apps/api/work-order-service/packages/database/

# Verify the copied files include proper exports
RUN cat packages/database/dist/index.d.ts | head -5

# Build user service with generated types
RUN cd apps/api/work-order-service && npm run build

# Runtime stage - 使用更小的基础镜像
FROM node:18-alpine AS runtime

# 设置镜像源（与构建阶段保持一致）
RUN echo "https://mirrors.aliyun.com/alpine/v3.18/main" > /etc/apk/repositories && \
    echo "https://mirrors.aliyun.com/alpine/v3.18/community" >> /etc/apk/repositories

WORKDIR /app

# 分步安装运行时依赖，每步都有自己的缓存层
RUN apk update --no-cache
RUN apk add --no-cache libc6-compat
RUN apk add --no-cache curl
RUN apk add --no-cache openssl

# Create app user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 apiuser

# Copy artifacts
COPY --from=builder --chown=apiuser:nodejs /repo/node_modules ./node_modules
COPY --from=builder --chown=apiuser:nodejs /repo/packages/database ./packages/database
COPY --from=builder --chown=apiuser:nodejs /repo/apps/api/work-order-service/dist ./dist
COPY --from=builder --chown=apiuser:nodejs /repo/apps/api/work-order-service/package*.json ./

# Ensure Prisma client is generated for runtime
RUN npx prisma generate --schema=./packages/database/prisma/schema.prisma || (echo "Prisma generate failed" && ls -la ./packages/database/prisma && exit 1)

USER apiuser

EXPOSE 3001

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3001/health || exit 1

CMD ["node", "dist/index.js"]