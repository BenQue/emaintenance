// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  EMPLOYEE     // 一线员工
  TECHNICIAN   // 维修技术员
  SUPERVISOR   // 设备主管
  ADMIN        // 系统管理员
}

enum WorkOrderStatus {
  PENDING         // 待处理
  IN_PROGRESS     // 进行中
  WAITING_PARTS   // 等待备件
  WAITING_EXTERNAL // 等待外部
  COMPLETED       // 已完成
  CANCELLED       // 已取消
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  WORK_ORDER_ASSIGNED
  WORK_ORDER_UPDATED
  SYSTEM_ALERT
}

enum FaultCode {
  MECHANICAL_FAILURE     // 机械故障
  ELECTRICAL_FAILURE     // 电气故障
  SOFTWARE_ISSUE         // 软件问题
  WEAR_AND_TEAR         // 磨损老化
  USER_ERROR            // 操作错误
  PREVENTIVE_MAINTENANCE // 预防性维护
  EXTERNAL_FACTOR       // 外部因素
  OTHER                 // 其他
}

// Master Data Models for Settings Management
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  reasons     Reason[]
  workOrders  WorkOrder[]
  assignmentRules AssignmentRule[] @relation("CategoryRules")

  @@index([isActive])
  @@index([name])
  @@map("categories")
}

model Location {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  assets      Asset[]
  workOrders  WorkOrder[]
  assignmentRules AssignmentRule[] @relation("LocationRules")

  @@index([isActive])
  @@index([name])
  @@map("locations")
}

model FaultCodeMaster {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  resolutionRecords ResolutionRecord[]
  maintenanceHistory MaintenanceHistory[]

  @@index([isActive])
  @@index([name])
  @@map("fault_codes")
}

model Reason {
  id          String   @id @default(cuid())
  name        String
  description String?
  categoryId  String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  workOrders  WorkOrder[]

  @@unique([name, categoryId], name: "unique_reason_per_category")
  @@index([isActive])
  @@index([name])
  @@index([categoryId])
  @@map("reasons")
}

model PriorityLevel {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  level       Int      @unique // For ordering: 1=LOW, 2=MEDIUM, 3=HIGH, 4=URGENT
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  workOrders  WorkOrder[]
  assignmentRules AssignmentRule[] @relation("PriorityRules")

  @@index([isActive])
  @@index([level])
  @@map("priority_levels")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  username      String   @unique
  password      String
  employeeId    String?  @unique
  domainAccount String?  @unique
  firstName     String
  lastName      String
  role          UserRole @default(EMPLOYEE)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  createdWorkOrders    WorkOrder[] @relation("CreatedBy")
  assignedWorkOrders   WorkOrder[] @relation("AssignedTo")
  ownedAssets          Asset[]     @relation("AssetOwner")
  administeredAssets   Asset[]     @relation("AssetAdministrator")
  assignmentRules      AssignmentRule[]
  notifications        Notification[]
  statusChanges        WorkOrderStatusHistory[]
  resolutionRecords    ResolutionRecord[]

  @@index([role, isActive])
  @@index([employeeId])
  @@index([createdAt])
  @@map("users")
}

model Asset {
  id              String   @id @default(cuid())
  assetCode       String   @unique
  name            String
  description     String?
  model           String?
  manufacturer    String?
  serialNumber    String?
  location        String? // Keep for backward compatibility during migration
  installDate     DateTime?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Foreign keys
  ownerId         String?
  administratorId String?
  locationId      String? // New reference to Location master data

  // Relations
  owner           User?       @relation("AssetOwner", fields: [ownerId], references: [id])
  administrator   User?       @relation("AssetAdministrator", fields: [administratorId], references: [id])
  locationRef     Location?   @relation(fields: [locationId], references: [id])
  workOrders      WorkOrder[]
  maintenanceHistory MaintenanceHistory[]

  @@index([location, isActive])
  @@index([locationId, isActive])
  @@index([assetCode])
  @@index([ownerId])
  @@index([administratorId])
  @@map("assets")
}

model WorkOrder {
  id              String          @id @default(cuid())
  title           String
  description     String
  category        String? // Keep for backward compatibility during migration
  reason          String? // Keep for backward compatibility during migration
  location        String? // Keep for backward compatibility during migration
  priority        Priority        @default(MEDIUM)
  status          WorkOrderStatus @default(PENDING)
  reportedAt      DateTime        @default(now())
  startedAt       DateTime?
  completedAt     DateTime?
  solution        String?
  faultCode       String?
  attachments     String[]        // JSON array of file URLs
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Foreign keys
  assetId         String
  createdById     String
  assignedToId    String?
  categoryId      String? // New reference to Category master data
  reasonId        String? // New reference to Reason master data
  locationId      String? // New reference to Location master data
  priorityId      String? // New reference to PriorityLevel master data

  // Relations
  asset           Asset     @relation(fields: [assetId], references: [id])
  createdBy       User      @relation("CreatedBy", fields: [createdById], references: [id])
  assignedTo      User?     @relation("AssignedTo", fields: [assignedToId], references: [id])
  categoryRef     Category? @relation(fields: [categoryId], references: [id])
  reasonRef       Reason?   @relation(fields: [reasonId], references: [id])
  locationRef     Location? @relation(fields: [locationId], references: [id])
  priorityRef     PriorityLevel? @relation(fields: [priorityId], references: [id])
  notifications   Notification[]
  statusHistory   WorkOrderStatusHistory[]
  photos          WorkOrderPhoto[]
  resolutionRecord ResolutionRecord?
  maintenanceHistory MaintenanceHistory?

  @@index([status, priority])
  @@index([assetId, status])
  @@index([assignedToId, status])
  @@index([createdById])
  @@index([reportedAt])
  @@index([category])
  @@index([categoryId])
  @@index([reasonId])
  @@index([locationId])
  @@index([priorityId])
  @@map("work_orders")
}

model WorkOrderStatusHistory {
  id              String   @id @default(cuid())
  workOrderId     String
  workOrder       WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  fromStatus      WorkOrderStatus?
  toStatus        WorkOrderStatus

  changedById     String
  changedBy       User     @relation(fields: [changedById], references: [id])

  notes           String?

  createdAt       DateTime @default(now())

  @@index([workOrderId, createdAt])
  @@index([changedById])
  @@map("work_order_status_history")
}

model WorkOrderPhoto {
  id               String   @id @default(cuid())
  workOrderId      String
  workOrder        WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  filename         String   // Generated unique filename
  originalName     String   // User's original filename  
  filePath         String   // Relative storage path (year/month/filename)
  thumbnailPath    String?  // Thumbnail path (year/month/thumbnails/thumb_filename)
  fileSize         Int      // File size in bytes
  mimeType         String   // Image MIME type

  uploadedAt       DateTime @default(now())
  
  @@index([workOrderId])
  @@map("work_order_photos")
}

model AssignmentRule {
  id              String   @id @default(cuid())
  name            String   // Rule description
  priority        Int      @default(0) // Rule priority for conflict resolution
  isActive        Boolean  @default(true)
  
  // Matching conditions - keep old string arrays for backward compatibility
  assetTypes      String[] // Asset type filter
  categories      String[] // Work order category filter (deprecated)
  locations       String[] // Location filter (deprecated)
  priorities      String[] // Priority filter (deprecated)
  
  // Assignment target
  assignToId      String   // Target technician
  assignTo        User     @relation(fields: [assignToId], references: [id])

  // New master data relationships
  categoryRules   Category[]     @relation("CategoryRules")
  locationRules   Location[]     @relation("LocationRules")
  priorityRules   PriorityLevel[] @relation("PriorityRules")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([isActive, priority])
  @@index([assignToId])
  @@map("assignment_rules")
}

model Notification {
  id              String   @id @default(cuid())
  userId          String   // Target user
  user            User     @relation(fields: [userId], references: [id])
  
  type            NotificationType
  title           String
  message         String
  isRead          Boolean  @default(false)
  
  // Optional reference to related entity
  workOrderId     String?
  workOrder       WorkOrder? @relation(fields: [workOrderId], references: [id])
  
  createdAt       DateTime @default(now())

  @@index([userId, isRead])
  @@index([workOrderId])
  @@index([createdAt])
  @@map("notifications")
}

model ResolutionRecord {
  id              String   @id @default(cuid())
  workOrderId     String   @unique // One-to-one relationship with WorkOrder
  workOrder       WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  solutionDescription  String   // Required description of solution
  faultCode           FaultCode?  // Keep for backward compatibility during migration
  faultCodeId         String?     // New reference to FaultCodeMaster

  // Photo attachments
  photos          ResolutionPhoto[]

  resolvedById    String   // Technician who resolved the issue
  resolvedBy      User     @relation(fields: [resolvedById], references: [id])
  faultCodeRef    FaultCodeMaster? @relation(fields: [faultCodeId], references: [id])

  completedAt     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([workOrderId])
  @@index([resolvedById])
  @@index([completedAt])
  @@index([faultCodeId])
  @@map("resolution_records")
}

model ResolutionPhoto {
  id                String   @id @default(cuid())
  resolutionRecordId String
  resolutionRecord  ResolutionRecord @relation(fields: [resolutionRecordId], references: [id], onDelete: Cascade)

  filename        String
  originalName    String
  filePath        String   // Storage path
  fileSize        Int      // File size in bytes
  mimeType        String   // Image MIME type

  uploadedAt      DateTime @default(now())

  @@index([resolutionRecordId])
  @@map("resolution_photos")
}

model MaintenanceHistory {
  id              String   @id @default(cuid())
  assetId         String
  asset           Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  workOrderId     String   @unique
  workOrder       WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  // Denormalized data for quick access
  workOrderTitle  String
  resolutionSummary String?
  faultCode       FaultCode? // Keep for backward compatibility during migration
  faultCodeId     String?    // New reference to FaultCodeMaster
  technician      String   // Technician name

  faultCodeRef    FaultCodeMaster? @relation(fields: [faultCodeId], references: [id])

  completedAt     DateTime
  createdAt       DateTime @default(now())

  @@index([assetId, completedAt])
  @@index([workOrderId])
  @@index([faultCodeId])
  @@map("maintenance_history")
}