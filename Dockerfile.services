# Multi-stage Dockerfile for all API Services
FROM node:20-alpine AS base

# Install dependencies
RUN apk add --no-cache libc6-compat curl

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY packages packages
COPY turbo.json ./

# Install all dependencies (including dev for building)
RUN npm ci

# Build stage
FROM base AS builder
COPY . .

# Generate Prisma client
RUN npm run db:generate

# Build TypeScript projects manually
WORKDIR /app/apps/api/user-service
RUN npx tsc --outDir dist --skipLibCheck

WORKDIR /app/apps/api/asset-service  
RUN npx tsc --outDir dist --skipLibCheck

WORKDIR /app

# Production base image for services
FROM node:20-alpine AS service-base

RUN apk add --no-cache libc6-compat curl

WORKDIR /app

# Create app user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 apiuser

# Copy production dependencies
COPY package*.json ./
COPY packages packages
RUN npm ci --only=production

# Copy built applications
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /app/node_modules/@prisma ./node_modules/@prisma

USER apiuser

# User Service
FROM service-base AS user-service
COPY --from=builder --chown=apiuser:nodejs /app/apps/api/user-service/dist ./apps/api/user-service/dist
COPY --from=builder --chown=apiuser:nodejs /app/apps/api/user-service/package*.json ./apps/api/user-service/

EXPOSE 3001
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3001/health || exit 1

CMD ["node", "apps/api/user-service/dist/index.js"]

# Asset Service
FROM service-base AS asset-service
COPY --from=builder --chown=apiuser:nodejs /app/apps/api/asset-service/dist ./apps/api/asset-service/dist
COPY --from=builder --chown=apiuser:nodejs /app/apps/api/asset-service/package*.json ./apps/api/asset-service/

EXPOSE 3003
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3003/api/health || exit 1

CMD ["node", "apps/api/asset-service/dist/index.js"]